// Generated by CoffeeScript 1.12.4
(function() {
  var ENCHANTS, NUMERALS, dynmapURL, generateResults, getServerData, idItems, loadShopData, shops, symbol,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  symbol = null;

  dynmapURL = null;

  $(function() {
    return $.getJSON('config.json', function(configData) {
      var ip, itemApi, json, name;
      console.log("Recieved Config...");
      name = configData.shopdexName;
      ip = configData.serverIP;
      json = configData.shopData;
      dynmapURL = configData.dynmapURL;
      itemApi = configData.itemAPI;
      symbol = configData.currencySymbol;
      $('#shopdexName').text(name);
      $('#shopdexIp').text(ip);
      getServerData(ip);
      return idItems(itemApi, function(itemNames) {
        return loadShopData(json, itemNames);
      });
    });
  });

  getServerData = function(ip) {
    return $.getJSON('https://mcapi.ca/query/' + ip + '/info', function(serverData) {
      var status, version;
      status = serverData.status;
      version = serverData.version;
      if (status === true) {
        $('#shopdexStatusColor').removeClass('red-text');
        $('#shopdexStatusColor').addClass('green-text');
        $('#shopdexStatus').text('Online');
        $('#shopdexVersion').text(version);
      }
      $('#shopdexImage').attr('src', 'https://mcapi.ca/query/' + ip + '/icon');
      return console.log("Loaded Config!");
    });
  };

  idItems = function(itemApi, callback) {
    return $.getJSON(itemApi, function(items) {
      var itemData, itemDataVal, itemId, itemIds;
      console.log("Recieved Item JSON...");
      itemIds = {};
      for (itemData in items) {
        itemDataVal = items[itemData];
        itemId = itemDataVal.type + ":" + itemDataVal.meta;
        itemIds[itemId] = itemDataVal.name.toLowerCase();
      }
      console.log("Converted Item JSON!");
      console.log(itemIds);
      return callback(itemIds);
    });
  };

  shops = [];

  loadShopData = function(json, itemNames) {
    return $.getJSON(json, function(jsonData) {
      var enchant, enchantList, invItems, invItemsVal, level, multiShop, multiShopItems, ref, ref1, ref2, ref3, ref4, root, rootVal, shop, shopGroup, shopGroupItemId, validSigns;
      console.log("Recieved Shop JSON...");
      validSigns = ["buy", "sell", "ibuy", "isell"];
      for (root in jsonData) {
        rootVal = jsonData[root];
        if (rootVal.invItems.length < 2) {
          multiShop = false;
        } else {
          multiShop = true;
          shopGroup = [];
          ref = rootVal.invItems;
          for (invItems in ref) {
            invItemsVal = ref[invItems];
            if (ref1 = rootVal.signType, indexOf.call(validSigns, ref1) >= 0) {
              shopGroupItemId = invItemsVal.type + ":" + invItemsVal.durability;
              shopGroup.push(invItemsVal.amount + " " + itemNames[shopGroupItemId]);
            }
          }
          multiShopItems = shopGroup.join(', ');
        }
        ref2 = rootVal.invItems;
        for (invItems in ref2) {
          invItemsVal = ref2[invItems];
          if (ref3 = rootVal.signType, indexOf.call(validSigns, ref3) >= 0) {
            shop = {};
            shop.itemId = invItemsVal.type + ":" + invItemsVal.durability;
            shop.name = itemNames[shop.itemId];
            shop.type = rootVal.signType;
            shop.price = rootVal.signPrice;
            shop.amount = invItemsVal.amount;
            shop.owner = rootVal.ownerName;
            if (shop.type === "ibuy" || shop.type === "isell") {
              shop.owner = "Server";
            }
            shop.stock = rootVal.invInStock;
            if (shop.type === "ibuy" || shop.type === "isell") {
              shop.stock = "infinite";
            }
            shop.world = rootVal.locWorld;
            shop.x = rootVal.locX;
            shop.y = rootVal.locY;
            shop.z = rootVal.locZ;
            shop.enchants = null;
            if (invItemsVal.meta) {
              if (invItemsVal.meta.enchantments) {
                enchantList = [];
                ref4 = invItemsVal.meta.enchantments;
                for (enchant in ref4) {
                  level = ref4[enchant];
                  enchantList.push(ENCHANTS[enchant] + " " + NUMERALS[level]);
                }
                shop.enchants = enchantList.join(', ');
              }
            }
            if (multiShop !== false) {
              shop.multi = multiShopItems;
            }
            if (shop.multi || shop.enchants) {
              shop.hasMeta = true;
            }
            shops.push(shop);
          }
        }
      }
      shops = shops.sort(function(a, b) {
        var pricePerA, pricePerB;
        pricePerA = a.price / a.amount;
        pricePerB = b.price / b.amount;
        return pricePerA - pricePerB;
      });
      console.log(shops);
      console.log("Loaded Shops!");
      $('#loadingSpinner').hide();
      $('#itemSearchBox').removeAttr('disabled');
      return $('#playerSearchBox').removeAttr('disabled');
    });
  };

  $('#itemSearchBox').on('input', function() {
    var enchantSearch, results, search, searchShop, shop;
    $('#results').html("");
    $('#playerSearchBox').val("");
    search = $('#itemSearchBox').val().toLowerCase();
    $('#resultsLabel').show();
    $('#query').text(search);
    results = [];
    for (searchShop in shops) {
      shop = shops[searchShop];
      if (shop.enchants) {
        enchantSearch = shop.enchants.toLowerCase();
        if (shop.name && shop.name.includes(search) || enchantSearch.includes(search)) {
          results.push(generateResults(shop));
        } else {
          results.push(void 0);
        }
      } else {
        if (shop.name && shop.name.includes(search)) {
          results.push(generateResults(shop));
        } else {
          results.push(void 0);
        }
      }
    }
    return results;
  });

  $('#playerSearchBox').on('input', function() {
    var results, search, searchShop, shop, shopOwner;
    $('#results').html("");
    $('#itemSearchBox').val("");
    search = $('#playerSearchBox').val().toLowerCase();
    $('#resultsLabel').show();
    $('#query').text(search);
    results = [];
    for (searchShop in shops) {
      shop = shops[searchShop];
      shopOwner = shop.owner.toLowerCase();
      if (shopOwner && shopOwner.includes(search)) {
        results.push(generateResults(shop));
      } else {
        results.push(void 0);
      }
    }
    return results;
  });

  generateResults = function(shop) {
    var color, enchantDisplay, inStock, multiDisplay, playerHead, shopImage;
    if (shop.stock === true) {
      color = 'green-text';
      inStock = 'In Stock';
    } else {
      if (shop.stock === "infinite") {
        color = 'green-text';
        inStock = '&infin; Stock';
      } else {
        color = 'red-text';
        inStock = 'No Stock';
      }
    }
    shopImage = shop.itemId.replace(':', '-');
    playerHead = "https://mcapi.ca/avatar/" + shop.owner;
    if (shop.owner === "Server") {
      playerHead = "https://mcapi.ca/query/" + $('#shopdexIp').text() + "/icon/";
    }
    if (shop.enchants) {
      enchantDisplay = "<p>Enchanted with<em> " + shop.enchants + "</em></p>";
    } else {
      enchantDisplay = "";
    }
    if (shop.multi) {
      multiDisplay = "<p>Includes<em> " + shop.multi + "</em></p>";
    } else {
      multiDisplay = "";
    }
    if (shop.hasMeta === true) {
      return $('#results').append("<div class=\"result\">\n	<img class=\"result-image\" src=\"img/" + shopImage + ".png\" alt=\"" + shop.name + "\">\n	<div class=\"result-info\">\n		<p><strong>" + shop.type + "</strong> " + shop.amount + " " + shop.name + " for " + symbol + shop.price + "</p>\n		<p><span class=\"" + color + "\">" + inStock + "</span> @ <a href=\"" + (dynmapURL + "?worldname=" + shop.world + "&mapname=surface&zoom=20&x=" + shop.x + "&y=" + shop.y + "&z=" + shop.z) + "\" target=\"_blank\">x" + shop.x + ", y" + shop.y + ", z" + shop.z + "</a>\n		<p><i class=\"icon-globe\"></i> " + shop.world + " &nbsp; <button class=\"show-on-mobile show-more-info\">More Details</button><small class=\"show-on-desktop\">Hover to See More Details</small></p>\n		<div class=\"result-player\"><img src=\"" + playerHead + "\" width=\"30px\" height=\"30px\"><p> " + shop.owner + "</p></div>\n		<div class=\"result-more-info\">\n			" + enchantDisplay + "\n			" + multiDisplay + "\n		</div>\n	</div>\n</div>");
    } else {
      return $('#results').append("<div class=\"result\">\n	<img class=\"result-image\" src=\"img/" + shopImage + ".png\" alt=\"" + shop.name + "\">\n	<div class=\"result-info\">\n		<p><strong>" + shop.type + "</strong> " + shop.amount + " " + shop.name + " for " + symbol + shop.price + "</p>\n		<p><span class=\"" + color + "\">" + inStock + "</span> @ <a href=\"" + (dynmapURL + "?worldname=" + shop.world + "&mapname=surface&zoom=20&x=" + shop.x + "&y=" + shop.y + "&z=" + shop.z) + "\" target=\"_blank\">x" + shop.x + ", y" + shop.y + ", z" + shop.z + "</a>\n		<p><i class=\"icon-globe\"></i> " + shop.world + "</p>\n		<div class=\"result-player\"><img src=\"" + playerHead + "\" width=\"30px\" height=\"30px\"><p> " + shop.owner + "</p></div>\n	</div>\n</div>");
    }
  };

  ENCHANTS = {
    'ARROW_DAMAGE': 'Power',
    'ARROW_FIRE': 'Flame',
    'ARROW_INFINITE': 'Infinity',
    'ARROW_KNOCKBACK': 'Punch',
    'BINDING_CURSE': 'Curse of Binding',
    'DAMAGE_ALL': 'Sharpness',
    'DAMAGE_ARTHROPODS': 'Bane of Arthropods',
    'DAMAGE_UNDEAD': 'Smite',
    'DEPTH_STRIDER': 'Depth Strider',
    'DIG_SPEED': 'Efficiency',
    'DURABILITY': 'Unbreaking',
    'FIRE_ASPECT': 'Fire Aspect',
    'FROST_WALKER': 'Frost Walker',
    'KNOCKBACK': 'Knockback',
    'LOOT_BONUS_BLOCKS': 'Fortune',
    'LOOT_BONUS_MOBS': 'Looting',
    'LUCK': 'Luck of the Sea',
    'LURE': 'Lure',
    'MENDING': 'Mending',
    'OXYGEN': 'Respiration',
    'PROTECTION_ENVIRONMENTAL': 'Protection',
    'PROTECTION_EXPLOSIONS': 'Blast Protection',
    'PROTECTION_FALL': 'Feather Falling',
    'PROTECTION_FIRE': 'Fire Protection',
    'PROTECTION_PROJECTILE': 'Projectile Protection',
    'SILK_TOUCH': 'Silk Touch',
    'SWEEPING': 'Sweeping Edge',
    'THORNS': 'Thorns',
    'VANISHING_CURSE': 'Curse of Vanishing',
    'WATER_WORKER': 'Aqua Affinity'
  };

  NUMERALS = {
    '1': 'I',
    '2': 'II',
    '3': 'III',
    '4': 'IV',
    '5': 'V'
  };

}).call(this);
